AWSTemplateFormatVersion: "2010-09-09"
Description: "Configuration Management"

Parameters:

  ServiceName:
    Type: String
    Description: Name of the service.
    MinLength: "1"
    MaxLength: "30"
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: Malformed input parameter. TenantId must only contain 30 upper and lower case letters, numbers, and -.
    Default: config-manager
  TableName:
    Type: String
    Description: Name of the DB table.
    MinLength: "1"
    MaxLength: "30"
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: Malformed input parameter. TenantId must only contain 30 upper and lower case letters, numbers, and -.
    Default: Config
  S3Bucket:
    Type: String
    Description: Artifact S3 bucket
  S3Key:
    Type: String
    Description: Artifact object key

Resources:

  DbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
      - AttributeName: tenantId
        AttributeType: S
      - AttributeName: configId
        AttributeType: S
      KeySchema:
      - AttributeName: tenantId
        KeyType: HASH
      - AttributeName: configId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: ExecutionRole
    Properties:
      FunctionName: !Ref ServiceName
      Runtime: nodejs6.10
      Handler: index.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      MemorySize: 1024
      Timeout: 120
      Role: !GetAtt ExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ServiceName}-role"
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}:*"
            Effect: Allow
          - Action: ["dynamodb:*"]
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}"
            Effect: Allow 

  Facade:
    Type: AWS::ApiGateway::RestApi
    DependsOn: FacadeRole
    Properties:
      Name: facade-api
      Body:
        swagger: "2.0"
        info:
          version: "2018-03-20T13:41:34Z"
          title: "test-api"
        host: "j6vpvi1w8i.execute-api.eu-central-1.amazonaws.com"
        basePath: "/"
        schemes:
        - "https"
        paths:
          /config:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: !GetAtt FacadeRole.Arn
            post:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: !GetAtt FacadeRole.Arn
          /config/{id}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: !GetAtt FacadeRole.Arn
            put:
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: !GetAtt FacadeRole.Arn
            delete:
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                "400":
                  description: "400 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaName}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
                credentials: !GetAtt FacadeRole.Arn
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
            
  FacadeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: facade-role
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      Path: "/"
      Policies:
      - PolicyName: FacadePolicy
        PolicyDocument:
          Statement:
          - Action: ["lambda:invoke*"]
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}:*"
            Effect: Allow
          - Action: ["cloudwatch:*"]
            Resource: "arn:aws:cloudwatch:*"
            Effect: Allow
            
  FacadeDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: Facade
    Properties:
      RestApiId: !Ref Facade
      StageName: prod

Outputs:
  ApiUrl:
    Description: URL of the API endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - !Ref Facade
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/"
        - prod
  Lambda:
    Description: "Lambda Service"
    Value: !Ref Lambda
  DbTable:
    Description: "DynamoDB Table"
    Value: !Ref DbTable
